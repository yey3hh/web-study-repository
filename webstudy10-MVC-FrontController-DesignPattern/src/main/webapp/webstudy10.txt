** webstudy01 **
HTTP : HyperText Transfer Protocol
HTTPS : HTTP Secure -> 보안 HTTP protocol, 암호화된 버전

Web Server : HTTP 프로토콜에 의거해 HTML(html, css, javascript) 문서document를 서비스하는 서버
			 웹 클라이언트인 브라우저에 정적인 컨텐트(+동적인 컨텐트) 이상을 서비스하는 서버
WAS : Web Application Server (Web Server(ex apache) + Web Container(ex tomcat))
	  데이터베이스 서버 및 다른 서버와 연동하여 다양한 비즈니스 로직을 처리하고, 동적인 컨텐트를 클라이언트에게 서비스하는 웹 어플리케이션 서버
	  
Web Container : 서블릿 컨테이너라고도 함.
				서블릿 라이프 사이클 관리(생성, 초기화, 서비스, 소멸을 제어)
				요청 처리를 위한 스레드 관리
				JSP를 HttpServlet 하위 서블릿 클래스로 생성 -> 실행 (JSP 엔진으로서의 역할)

자바 웹 어플리케이션 개발 환경 설정
	1. apache tomcat/conf/server.xml 에서 port 변경(기본 8080인데 다른 프로그램(ex 오라클)과 충돌이 날 수 있으므로 8888로 변경)
	   get 요청 방식 한글처리(다국어 처리)를 위해 URIEncoding="utf-8"을 추가 설정함
    2. apache tomcat/conf/context.xml에서 reloadable="true"를 설정하여 java class가 변경되어 다시 컴파일 될 때 톰캣 서버에 자동 배포 되도록 설정
    
웹 클라이언트 브라우저 동작 원리
	웹 어플리케이션 서버에 요청request을 하여 응답response 받으면 HTTP Response Message를 해석한다.
	HTML을 읽는다 -> HTML을 파싱한다 -> DOM Tree를 생성 -> Render 트리가 생성(CSS와 결합) -> 브라우저에 표시

Client Side : html, css, javascript (Server Side도 가능)
Server Side : Servlet/JSP -> Spring

*** Servlet 기본 개념 ***
Servlet : java web programming을 위한 기술(Server + Let)
		  Web Container(or Servlet Container) 위에서 개발, 실행됨
		  MVC의 Controller 역할을 담당
		  (참고 - MVC는 Design Pattern(설계 패턴), SpringMVC는 기술 명칭)
		  Model : 비즈니스 로직과 데이터 액세스 로직을 담당(java(java beans : Dao, Service..))
		  View : 클라이언트 응답을 전담 (jsp or thymeleaf or json)
		  Controller : 제어자 역할, 요청을 분석하여 Model과 연동, 연동 결과를 View에 공유해 응답하게 함(java 기반 Servlet, ex : Spring or SpringBoot의 DispatcherServlet)

Http Request Method
	get 방식 : 정보 조회용, url에 정보가 노출, 전송 용량에 제한 -> 서블릿의 doGet 메서드가 실행
	post 방식 : 정보 전송용, url에 정보가 노출되지 않음, 전송 용량 제한 X (편지를 담는 편지 봉투 역할)
			   http request message body 부분에 저장되어 전송 -> 서블릿의 doPost 메서드가 실행
			   
웹 어플리케이션 설정 정보(메타 데이터)
	1) web module version 3이상, 현재는 5이상(가장 높은 버전은 6)에서 지원하는 Annotation 기반 웹 설정
	   @WebServlet(url-pattern) : 클라이언트에서 해당 서블릿을 실행하기 위한 url 정보
	   							  웹 컨테이너(or WAS)는 서버 시작 시점에 해당 웹 어플리케이션 설정 정보를 로드하여 서비스 함.
	   							  
*** webstudy02 ***
xml 기반 메타 데이터(설정 정보)를 통한 웹어플리케이션을 확인
@WebServlet(url-parttern)애너테이션 역할을 web module 2.5버전에서는 WEB-INF/web.xml에서 한다.

웹 어플리케이션 설정 정보(메타 데이터)
	2) web.xml : 아래의 설정에 의거해 클라이언트는 xmlConfigTest url로 요청한다.
		  <servlet>
		    <servlet-name>XmlConfigTestServlet</servlet-name>
		    <servlet-class>test.XmlConfigTestServlet</servlet-class>
		  </servlet>
		  <servlet-mapping>
		    <servlet-name>XmlConfigTestServlet</servlet-name>
		    <url-pattern>/XmlConfigTest</url-pattern>
		  </servlet-mapping>

**** 서블릿 공부시 재사용할 코드 ****
	/**
	 * doGet() : 클라이언트(브라우저) get 요청을 처리하는 메서드
	 * 클라이언트(브라우저)에서 직접 url을 명시하거나 링크, 폼 등을 이용해 호출될 때 실행
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
//		response.getWriter().append("Served at: ").append(request.getContextPath());
		
//		응답시 컨텐트 타입을 설정, 브라우저에서 지금 응답은 HTML 문서야 라고 메세지를 보내기 위함
		response.setContentType("text/html;charset=UTF-8");
//		HTML을 브라우저로 전송하기 위한 출력 스트림
		PrintWriter out =  response.getWriter();
		out.print("<html>");
		out.print("<head>");
		out.print("<title>Servlet Study</title>");
		out.print("</head>");
		out.print("<body>");
		out.print("<h3>Hello Servlet</h3>");
		out.print("</body>");
		out.print("</html>");
		
		out.close();
	}
	
서블릿 계층 구조 Servlet Hierarchy
최상위 인터페이스
<<interface>>
Servlet : init(), service(), destroy()와 같은 abstract method가 선언되어 있음
설명 : 모든 자바 웹 프로그램은 Servlet interface의 하위 클래스임

위의 Servlet interface를 implements하는 하위 Abstract class 
<<abstract class>>
GenericServlet : 프로토콜에 독립적인 서버 프로그램을 위한 클래스
				 일반적인 서버 차원에서 가져야하는 기능을 자식에게 물려주고, 프로토콜에 특화된 자식 차원에서 구현해야 하는 service(request, response) 메서드는
				 abstract method 선언해 구현을 강제한다 (ex 피자 서비스의 abstract topping 메서드)
				 
위의 abstract class인 GenericServlet을 상속받는(extends) 하위 Abstract class
<<abstract class>>
HttpServlet : Web Program을 위한 HTTP 프로토콜에 특화된 클래스
			  웹 서비스에 필요한 기능을 자식에게 물려준다.
			  자바 웹 프로그램은 이 HttpServlet을 상속받아야 한다.(모든 Servlet과 JSP, ex> Spring의 DispatcherServlet 또한 HttpServlet의 자식임)
			  동작 원리 -> 부모 GenericServlet의 abstract method인 service(request, response)를 implements 구현하여 Web Container가 service 메서드를 호출하면
			  			 구현한 service 메서드가 Http Request Method에 따라 개발자가 구현한 doGet or doPost 등의 dispatch(위임) 하여 실행되고 응답된다.

Form과 Servlet(or JSP) 연동
client
<form action="처리할 서버 프로그램 url" method="get or post">	---- request ----> Web Server -- Web Container -- MyServlet
	<input type="text" name="userId">														  service 호출 --> service() -- dispatch --> doGet() or doPost()
	<button type="submit">검색</button>													<-- response --					

- Http Status Code (상태 코드) : 클라이언트(브라우저)와 서버(WAS)가 서로의 상태를 이해하는 약속, HTTP 상태 코드는 세자리 숫자로 구성
							   대표적인 Status Code 상태 코드 
							   -> 200 OK : 요청이 성공적으로 처리됨. 가장 일반적인 성공 코드
							   	  404 NOT FOUND : 요청한 리소드를 서버에서 찾을 수 없을 때
							   	  405 METHOD NOT ALLOWED : 요청에 사용된 HTTP 메서드(get, pos 등)가 해당 리소스(서버 프로그램)에 대해 허용되지 않음을 의미,
							   	  						-> 만약 post 방식으로 클라이언트가 요청했는데 doGet()을 구현한 경우 
	   	  						  500 Internal Server Error : 서버에 예상하지 못한 오류가 발생하여 요청을 처리할 수 없음을 나타냄. 가장 일반적인 오류
	
*** 서블릿 아키텍처의 핵심 특징 ***
자바 웹 응용 프로그램 개발자 - 표준 서블릿 API 제정 - WAS Vendor
	인터페이스 기반 개발							인터페이스를 구현
1. 표준화된 서블릿 API (인터페이스 기반 개발)
   자바 웹 응용프로그램 개발자는 Servlet API(Servlet, ServletRequest, ServletResponse interface 등)
   Jakarta EE (Java EE) 표준으로 정의된 인터페이스 기반으로 일관되게 웹 어플리케이션을 개발함
   이 표준화된 서블릿 API 덕분에 특정 WAS 제품에 종속되지 않고 일관된 방식으로 웹 어플리케이션을 구현할 수 있음
2. WAS(Web Application Server)의 구현 및 추상화
   Apache Tomcat, JBoss, WebLogic, Jetty 등과 같은 WAS 제품들은 표준화된 Servlet API 인터페이스들을 각자의 방식으로 최적화 되게 구현
   자신의 구현체를 업그레이드를 하여도 서블릿 표준 인터페이스(API)로 응용프로그램 개발자들은 개발하므로 업그레이드가 용이
3. 벤더 독립성 및 이식성
   이러한 서블릿 웹 아키텍쳐 구조 덕분에 특정 WAS에서 개발된 웹 어플리케이션은 다른 WAS에서도 큰 수정없이 동작할 수 있는 높은 이식성(PSA : Portability)을 갖음
   기업은 특정 벤더에 종속되지 않고, 필요에 따라 다양한 WAS 제품을 선택하거나 변경할 수 있는 유연성을 확보할 수 있음
4. 웹 응용 프로그램 개발 생산성 향상
   다양한 WAS 제품군들과 관계없이 표준화된 방법으로 웹 개발이 가능
   
*** 서블릿 라이프 사이클 Servlet LifeCycle ***
IOC 디자인 패턴 : Spring에서 자세히 다룰 예정
				Inversion Of Control (제어의 역전) -> 객체가 필요로 하는 다른 객체(의존성)을 생성해서 사용하는 것이 아니라 
													외부(컨테이너, 프레임워크)등에서 객체를 대신 생성하여 필요할 때 주입해주는 방식을 말함

웹 컨테이너가 서블릿 객체의 클래스 로딩, 객체 생성, 초기화(init()), 서비스 실행(service()), 소멸(destroy())를 담당함
ex - 우리가 장을 볼 때 직접 마트에 가지 않고 앱으로 주문해 내 집 앞으로 아침마다 배달 받는 것! (나는 안가도 어플 사용만으로도 주문하면 물건을 고르고 포장하고 보내는 것 까지 쿠팡에서 다 해줌)

서블릿(자바 웹 프로그램 객체)은 개발자가 직접 객체를 생성하거나 소멸시키지 않고 웹 컨테이너에 의해 그 생명 주기가 전적으로 관리됨 (IOC)

서블릿 생명주기 Servlet LifeCycle
init() : 스타벅스 매장 개업 준비 (인테리어, 직원 교육, 메뉴 준비) 어디서나 스벅은 표준화 되어있음
service() : 손님에게 커피 서비스 (주문 받고 요리하고 손님 부르고..)
destroy() : 매장 폐업(정리, 직원 정산, 임대 반납)
- 참고 : Spring의 Bean LifeCycle에 동일한 개념이 적용 / @PostConstruct, @PreDestroy가 서블릿의 init(), destroy()와 같은 역할을 함


Servlet LifeCycle 상세 분석
1단계 : 서블릿 클래스 로딩 및 객체생성 (class loading & instantiation(인스턴트화))
	   클라이언트 요청 -> Web Container가 해당 서블릿 클래스를 로딩 -> 인스턴트 생성 (단 한번 생성 -> Singleton Pattern)
2단계 : 초기화 단계 (initialization)
	   public void init() or public void init(ServletConfig config)
	   인스턴스 생성 직후 - 단 한번 실행, 서블릿 서비스 전 필요한 초기 작업 수행(설정 정보, 파일, DB 로딩 등..)
3단계 : 서비스 (Service)
	   protected void service(HttpServletRequest request, HttpServletResponse response){
	   }
	   .... dispatch(위임) -> Http Request Method에 따라 -> doGet(request, response) or doPost(resquest, response) 등 매 요청시 실행
	   						 멀티 스레드 환경에서 동시 실행 가능, 실제 웹 서비스를 하는 메서드 (고르인, 구매, 검색 등)
4단계 : 소멸(Destruction)
	   public void destroy(){}
	   서블릿 언로드 또는 WAS(Web Container) 종료 직전 단 한번 실행(캐시 정리, 파일 닫기, DB 연결 해제)

loadOnStartup = 1
 : 웹 어플리케이션이 실행이 시작되는 시점에 가장 우선적으로 이 옵션이 명시된 서블릿을 초기화함.
서블릿 라이프 사이클 구조상 클라이언트의 첫 요청 시점에서블릿이 초기화 작업을 하므로 웹 어필리케이션에서 중요한 역할을 하는 서블릿(초기화 작업이 많은 서블릿 포함)은
이 옵션이 유용함.

*** webstudy04 ***

*** ServletConfig & ServletContext ***
1. ServletConfig
	: 서블릿 설정 정보 객체
	  서블릿 객체 당 하나 생성
	  servletContext의 주소값을 저장하고 있음
	  웹 컨테이너에 의해 서블릿 초기화. 즉, init(ServletConfig config) 시점에 호출되어 ServletConfig 객체가 전달
	  사원이 servlet, 사원증은 servletConfig ⇒ 사원이면 사원증이 무조건 있다 (init()이 무조건 실행되기 때문에 → config를 무조건 부른다)
	구체적으로 어떤 설정 정보인가? 
	  예) Spring MVC에서 DispatcherServlet이 초기화되는 시점에 init 메서드를 웹 컨테이너가 호출하여 Spring 설정 정보가 저장된 ServletConfig 객체를 전달됨
	  

2. ServletContext
	: 웹 어플리케이션 당 하나 생성
	  웹 어플리케이션 내 모든 서블릿과 jsp들이 공유하여 사용할 수 있는 객체.
	  Web Application이 시작 시점에 ServletContext 객체가 생성되고 Web Application 소멸 직전에 ServletContext 객체는 소멸됨.
	  사원 - 사원증, 사원 - 사원증, 사원 - 사원증 ⇒ 사원이 없으면 사원증도 없음  
	  ⇒ 사내 인트라넷 (사원증이 있는 사원만 사용 가능)
    구체적으로 어떤 곳에 사용되는가?
      웹 어플리케이션 전체 설정관리, 각각의 서블릿(jsp 포함)간 데이터 공유 지원
	  
					ServletConfig와 ServletContext	  
구분			ServletConfig				ServletContext
			개별 서블릿 당 하나				웹 어플리케이션 당 하나
			개별 서블릿 전용				웹 어플리케이션 내의 웹 프로그램(Servlet or JSP...)
		@ 애너테이션 또는 web.xml				web.xml
  	Spring과 연관성, 개별 Bean 설정			ApplicationContext
  	
*** ServletContextListener ***
 : Application LifeCycle Listener
 웹 어플리케이션 시작 시점과 종료 시점의 이벤트를 감지하여 시작 시점에 필요한 초기화 작업 (예. 보안)과 contextInitialized()
 종료 시점에 필요한 작업 (예. 백업, 로깅)을 정의해 실행시킬 수 있다. contextDestroyed()
 
 
*** webstudy05 ***
*** *** Cookie와 Session *** ***

Cookie와 Session이 필요한 이유?
HTTP(HyperText Transfer Protocol)는 Stateless 속성을 갖음
Stateless -> 서버의 서비스를 받는 사용자 정보를 유지하지 않는 속성

사용자 정보를 필요시에 유지하기 위한 기술이 Cookie & Session!
예) Session과 Cookie가 필요한 사례
	: 인증 기반 서비스, 쇼핑몰 장바구니, 주문 또는 결제 등
	
세션 관리 : 사용자 정보를 일정 조건동안 유지
상태정보 : 사용자의 자격 또는 의사를 저장하고 있는 정보

사용자 상태 정보를 유지하는 방식 중
			Cookie 				Session
저장위치		클라이언트				  서버
보안성		낮음				높음(서버에서 관리하므로)
데이터 타입	문자열로 제한		타입의 제한 없음		
저장용량		제한적(4k)		제한없음(서버 상황에 따라)
생명주기		설정(유효기간)		서버 메모리 상황에 따라
네트워크		매 요청시 전송		최초 1회만 ID를 전송

1. Cookie
	클라이언트 측 상태 정보 저장
	저장 용량 제한 (4kb) -> 작은 상태 정보 이용
	
	Servlet, jsp, Spring Controller
	Cookie 생성시 유효시간 설정
	유효시간을 설정하지 않으면 해당 브라우저 실행시까지만 유효
	
	step1. 클라이언트가 접속하면 SetCookieServlet이 쿠키 생성해 응답시에 전달하여 클라이언트 측에 저장
									Web Container
	client brower -- request --> SetCookieServlet
								 Cookie 생성(name, value)
								 cookie.setMaxAge(30); //30초간 유효
								 response.addCookie(cookie)
				  <-- request --
	
	step2. 클라이언트가 접속하면 GetCookieServlet이 실행
							request.getCookies() : Cookie[]
							cookie[i].getName(), cookie[i].getValue()를 이용해 쿠키 정보를 출력
2. Session(HttpSession)
	서버 측에 사용자 상태 정보를 저장
	저장 용량 및 데이터 타입 제한 없음
	로그인, 로그아웃시 주로 사용됨.

	세션 유효시간
	1. WAS에 설정된 지정 유효시간 내 재접속이 없으면 세션 만료
	   (tomcat : apache-tomcat-10.1.42\conf\web.xml에 유효시간 설정)
	2. 브라우저 종료시 세션 만료
	3. 로그아웃 실행시 세션 만료

*** 세션 관련 주요 메서드 ***
1. request.getSession() or request.getSession(true) 
	: 기존 세션이 있으면 기존 세션을 반환하고 없으면 새로 생성
2. request.getSession(false)
	: 기존 세션이 있으면 기존 세션을 반환하고 없으면 null 반환
3. session.setAttribute(name.value)
	: 세션에 저장할 정보를 name과 value로 쌍으로 저장
4. session.getAttribute(name) : Object
	: 세션에 저장된 정보를 name으로 찾으면 value Object를 반환
5. session.invalidate();
	: 세션을 무효화. 더이상 사용하지 않는다라고 판단.

*** Session의 동작원리 ***
	: 세션은 내부적으로 jsessionid라는 쿠키를 사용
								LoginServlet
client browser --- request --> request.getSession() : 세션 생성
								: getSession() 메서드 내부에서 client가 전달한 cookie 정보 중 jesessionid cookie를 확인해서 
									존재하면 세션이 있는 것으로 판단해 기존 세션을 리턴하고 없으면 새로 생성
									
									request.getSession(false) -> 클라이언트가 보낸 HttpRequest Message 중에 cookie를 확인해서 
									jesessionid가 존재하지 않으면 null을 반환, 존재하면 기존 세션 반환

JSP와 같은 경우 request.getSession()이 기존으로 내장되어 있음									
정확하게 인증 여부를 판단할 때는 session 유무와 로그인 검증시 저장한 (setAttribute(name)) 인증 정보와 함께 비교하는 것을 권장한다.
if(세션이 존재하고 인증 정보가 있으면 로그인 되어 있다) {}


*** *** JSP *** ***

JSP : Java Server Page, 서버 측에서 웹 페이지를 동적으로 생성하는 기술 (Template Engine)
	  HTML에 자바 코드를 삽입하는 형식으로 개발 -> 동적인 웹 페이지를 구현하는 데 적합
	  Template Engine (서버 사이드 웹페이지 생성 기술) -> jsp, thymeleaf 등 MVC의 View를 담당
	  
JSP의 기본 문법
	1) JSP 주석 <%-- --%>
	2) Scriptlet 스크립틀릿 <% %> java code 삽입시 사용, service 메서드 내 코드로 삽입
	3) Expression 출력 <%= %> out.print()로 생성, 출력시 사용
	4) Declaration 선언 <%! %> 멤버 변수 또는 메서드를 정의할 때 사용
	5) Directive 지시 <@% %> 웹 컨테이너에게 현 페이지 메타 정보를 기술 (import, encoding, errorPage)

JSP LifeCycle : JSP는 HTTPServlet의 자식 클래스로 생성되므로 서블릿 라이프 사이클과 동일.
								WAS(Web Container)
client browser --- request --> is loaded? (이거 메모리에 있냐?) --- no --> hello.jsp --- hello_jsp.java --> hello_jsp.class
									|																		|
								   yes															  class loading 및 객체 생성
									|																		|
									|																init() -> jspInit()
									|																		|
								 	------------------------------------------------------->		service() -> jspService()
													destroy() --> jspDestroy()												
	
*** JavaScript DOM ***
DOM : Document Object Model, 문서 객체 모델
	  JavaScript에서 web document의 element를 제어하기 위한 프로그래밍 인터페이스, Tree 구조로 구성되어 있음
	  
BOM : Browser Object Model, 브라우저 객체 모델
	  JavaScript가 브라우저와 소통하기 위해 마들어진 객체 모델
	  web document가 element를 제외한 웹 브라우저 창에 포함된 객체 요소를 의미함 (window 속성에 속하고 document가 아닌 window를 제어)
	  ... alert()은 window.alert() 중 window가 생략된 것
	  window.location, window.onload 등..
	  
*** *** Model1 Architecture *** ***
Software Architecture : 소프트웨어 설계양식
	-> 소프트웨어의 전체 구조를 표현하며 소프트웨어 구성요소(component) 사이의 관계를 정의
	
	초기 웹 개발 방식 (1990 년대 후반 ~ 2000년대 초반)
				jsp <----> Database
		
	Model1 Architecture (2000년대 초반 ~ 중반)
jsp <---> java beans(Dao, Service 등) <---> Database

	Model 1에서 java bean은 java component를 의미
			   java bean은 business logic과 data access logic을 담당
			   jsp는 요청을 분석하여 java bean과 연동하는 역할과 응답을 전달하는 view 역할
			   
	이후 
	Model2 Architecture (2000년대 초중반 ~ )

*** *** webstudy08 *** *** 

Model 2 MVC 이론 정리

Model2 Architecture
		controller (Servlet)
View(jsp)				Model(java)

model2 architecture의 핵심적인 디자인 패턴이 MVC 패턴이다.
model 2 MVC, MVC, Web MVC, MVC2 등으로 불림.

Model : 데이터와 비즈니스 로직 담당
View : 응답 전담(화면 표시 담당, Http Response Message를 전담)
Controller : 요청 처리를 전담, Model과 View를 제어
			 상세 : 요청에 대한 분석, 분석에 따른 Model 연동
			 	   연동 결과에 따른 View를 선택하고 이동방식 (forward or redirect)을 결정
why? jsp가 view 역할을 담당할까?
		-> Java Server Page : 동적인 웹페이지 구현 및 응답 최적화 기술
	 Servlet이 왜 Controller 역할을 전담할까?
	 	-> Http를 이해하는 자바 클래스가 HttpServlet class : HttpServlet class는 http 프로토콜 기반의 프로그램 구현에 최적화 되어있음
	 													HttpRequest와 HttpResponse Message 분석 후 제어하는 컨트롤러에 가장 최적화된 기술임
	 													(그래서 스프링의 DispatcherServlet이 가장 중요한 Front Controller로 사용되고 있음)
	Java component가 Model 역할을 할까?
		-> 비즈니스 로직과 데이터 액세스 로직을 처리하기 가장 최적화 되어 있음
		
		
	*** Controller에서 View로 제어를 이동하는 방식 ***
	1. forward 방식 : 웹 컨테이너 상에서 이동되는 방식
					 request와 response가 유지, 정보 조회 용도에 적합(재요청시 재동작 되는 특성)
	2. redirect 방식 : 클라이언트에게 응답 view url을 지정하는 방식, 기존 요청에 대한 응답으로 새로운 페이지 url을 명시하여 결과를 보는 방식
					  기존 request와 response는 유지 되지 않음
					  재 동작이 되지 않아야 하는 작업에 적합(회원가입, 로그인, 상품 등록 등..)
	*** *** 상세 설명 *** ***
	
	- request.getRequestDispatcher(url).forward(reqset, response)
	- response.sendRedirect(url) 
	
	특징
		foward								redirect
	서부 내부에서 동작						클라이언트 브라우저가 동작
	url 변경 X 							url 변경 O
	요청 객체 유지	O						요청 객체 유지 X
	웹 컨텍스트 경로 제외한 내부 경로(/)		웹 컨텍스트 경로 포함 절대/상대 경로
	중복 동작(or 재동작) 가능				중복 동작 방지
	브라우저에서는 단일 요청/응답으로 인식		재요청으로 인식
	
	
*** ** *** ** EL과 JSTL ** *** ** *** 

** EL ( Expression Language ) ** 
JSP 버전이 상향되면서 추가된 스크립트 언어
기존 Scriptlet tag의 표현식 ( <%= %> ) 의 업그레이드 된 버전 ( ${ } ) 
JSP 속성영역 ( request, session, application(ServletContext) ) 에 저장된 객체의 
property 를 출력하는 용도 
EL을 이용하면 별도의 import , Object Casting 절차 필요없이 바로 출력이 가능 , 
다양한 연산 및 자동 형변환이 된다 
JSTL 과 연동이 가능 
EL은 Model 객체의 get계열 메서드와 is계열의 메서드에 접근 가능 

** JSTL( Jsp Standard Tag Library ) ** 
View(jsp) 에서 자주 사용하는 기능 ( 조건문 , 반복문, 자료구조의 데이터 표현 )을 
미리 구현해 놓은 태그 라이브러리 
EL 과 함께 사용해서 View 로직과 데이터를 표현 

환경설정 : WEB-INF\lib\jakarta.servlet.jsp.jstl-3.0.1.jar와 jakarta.servlet.jsp.jstl-api-3.0.0.jar 파일을 위치시킴 

참고 다운로드 경로 : https://mvnrepository.com/artifact/jakarta.servlet.jsp.jstl/jakarta.servlet.jsp.jstl-api/3.0.0 
https://mvnrepository.com/artifact/org.glassfish.web/jakarta.servlet.jsp.jstl/3.0.1

JSTL 라이브러리 구성 요소
jakarta.servlet.jsp.jstl-api-3.0.0.jar
역할: JSTL 태그들의 인터페이스와 명세를 정의하는 API 라이브러리

jakarta.servlet.jsp.jstl-3.0.1.jar (또는 org.glassfish.web:jakarta.servlet.jsp.jstl)
역할: JSTL API의 실제 구현체로, 태그들의 동작을 실제로 수행하는 구현 라이브러리 
개발 시: API JAR만 있어도 코드 작성과 컴파일 가능
실행 시: 구현 JAR가 있어야 실제 태그 기능이 동작
이처럼 API와 구현체를 분리하는 것은 Java의 핵심 설계 원칙인 '인터페이스와 구현의 분리'를 보여주는 좋은 예시임  

JSP 페이지에서 JSTL 사용 선언부 
<%@ taglib prefix="c" uri="jakarta.tags.core" %>
중요 포인트: 톰캣 10.1은 Jakarta EE 10을 기반으로 하므로 jakarta.tags.core 네임스페이스를 사용해야 함 


*** ** *** ** *** webstudy10-MVC-FrontController-DesignPattern *** ** *** ** ***

Front Controller Design Pattern
 : 모든 클라이언트의 요청을 하나의 진입점으로 통합하여 처리하는 설계 패턴
Design Pattern : 어떠한 문제에 대한 해결책을 재사용할 수 있도록 정형화 한 것

실생활 예)
호텔 프론트
	- 모든 고객 요청이 프론트 데스크로 집중
	- 전 층 어느 층이던 상관 없이 고객의 모든 요청들은 프론트로 오기 때문에 표준화가 됨
	- 프론트 데스크에서 요청에 대한 적잘한 부서 또는 담당자로 연결
	- 체크인, 홈서비스, 청소 등 각각 전담 부서 처리

Front Controller가 없다면?
문제 상황 : 각 기능마다 별도 입구를 찾아야 함
	- 회원가입 -> RegisterMemberServlet
	- 로그인 -> LoginServlet
	- 로그아웃 -> LogoutServlet
	- 상품조회 -> FindProductByIdServlet
	- 주문처리 -> OrderProcessingServlet
	등 등 사용자 측에 부담이 감
	
결과 : 
	1. 프론트가 없다면 공통 처리 로직 중복 -> 보안, 로깅, 인코딩 등
	2. 일관성 없는 처리 방식
	3. 관리 포인트 급증 (이건 이렇게 하면 안되지! 저건 저렇게 해야지!)
	4. 생산성 저하 및 유지 보수의 어려움

공항 검색대도 동일 - 보안이 중요하기에 어느 나라로 출국하는지와 상관 없이 한 곳에서 검사를 진행

Front Controller Design Pattern 도입 후
위 문제의 해결책 : 모든 요청을 하나의 입구로 처리

장점 : 공통 로직의 중앙화 (보안, 로깅, 예외 처리 등)
	  일관된 요청 처리 흐름
	  관리 포인트 단일화
	  확장성과 유지보수성 향상
	  표준화가 되어있기 때문에 새로운 요청이 들어와도 한 곳에서 처리 가능
	  
Spring과 연관성 : Spring MVC의 DispatcherServlet이 Front Controller Pattern이 적용된 Front Controller 역할을 함

FrontController Ver1 : 기본 Front Controller -> 모든 클라이언트의 요청을 하나의 진입점으로 모았음
// 모든 로직이 doDispatch에 집중
	doDispatch(HttpServletRequest request, HttpServletResponse response) throws IOException {
		if (requestType != null && requestType.equals("findbyid")) {
			// 직접 요청 처리 (비즈니스 처리)
		} else if (requestType != null && requestType.equals("registerCustomer")) {
			// 직접 요청 처리 (비즈니스 처리)
		}
	}
문제점 : 코드 비대화, 확장성 부족 (만약 새로운 업무 추가시 공통 코드를 계속 변경)

FrontController Ver2 : 메서드 분리

doDispatch(HttpServletRequest request, HttpServletResponse response) {
	if() {
		findCustomerById(HttpServletRequest request, HttpServletResponse response)
	} else if() {
		registerCustomer(HttpServletRequest request, HttpServletResponse response)
	}
}

findCustomerById(HttpServletRequest request, HttpServletResponse response) {
}
registerCustomer(HttpServletRequest request, HttpServletResponse response) {
}

*** ** *** ver2 : 메서드별로 역할을 분리, 단일 책임 원칙 *** ** ***
protected void findCustomerById(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 클라이언트 요청 분석 : 클라이언트로부터 고객 아이디를 받아 온다.
		String id = request.getParameter("customerId");
		// MockDao와 연동
		CustomerVo customer = MockDao.getInstance().findCustomerById(id);
		// 고객이 존재하면 고객정보를 request에 공유하여 forward로 응답
		if(customer != null) {
			request.setAttribute("customer", customer);
			request.getRequestDispatcher("findbyid-ok.jsp").forward(request, response);
		} else {
			// 고객이 존재하지 않으면 redirect 방식으로 응답
			response.sendRedirect("findbyid-fail.jsp");
		}
	}
	
	protected void registerCustomer(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String id = request.getParameter("id");
		String name = request.getParameter("name");
		String address = request.getParameter("address");
		CustomerVo customer = new CustomerVo(id, name, address);
		
		MockDao.getInstance().registerCustomer(customer);
		
		response.sendRedirect("register-result.jsp");
	}














	
