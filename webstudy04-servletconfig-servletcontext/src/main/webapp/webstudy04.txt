** webstudy01 **
HTTP : HyperText Transfer Protocol
HTTPS : HTTP Secure -> 보안 HTTP protocol, 암호화된 버전

Web Server : HTTP 프로토콜에 의거해 HTML(html, css, javascript) 문서document를 서비스하는 서버
			 웹 클라이언트인 브라우저에 정적인 컨텐트(+동적인 컨텐트) 이상을 서비스하는 서버
WAS : Web Application Server (Web Server(ex apache) + Web Container(ex tomcat))
	  데이터베이스 서버 및 다른 서버와 연동하여 다양한 비즈니스 로직을 처리하고, 동적인 컨텐트를 클라이언트에게 서비스하는 웹 어플리케이션 서버
	  
Web Container : 서블릿 컨테이너라고도 함.
				서블릿 라이프 사이클 관리(생성, 초기화, 서비스, 소멸을 제어)
				요청 처리를 위한 스레드 관리
				JSP를 HttpServlet 하위 서블릿 클래스로 생성 -> 실행 (JSP 엔진으로서의 역할)

자바 웹 어플리케이션 개발 환경 설정
	1. apache tomcat/conf/server.xml 에서 port 변경(기본 8080인데 다른 프로그램(ex 오라클)과 충돌이 날 수 있으므로 8888로 변경)
	   get 요청 방식 한글처리(다국어 처리)를 위해 URIEncoding="utf-8"을 추가 설정함
    2. apache tomcat/conf/context.xml에서 reloadable="true"를 설정하여 java class가 변경되어 다시 컴파일 될 때 톰캣 서버에 자동 배포 되도록 설정
    
웹 클라이언트 브라우저 동작 원리
	웹 어플리케이션 서버에 요청request을 하여 응답response 받으면 HTTP Response Message를 해석한다.
	HTML을 읽는다 -> HTML을 파싱한다 -> DOM Tree를 생성 -> Render 트리가 생성(CSS와 결합) -> 브라우저에 표시

Client Side : html, css, javascript (Server Side도 가능)
Server Side : Servlet/JSP -> Spring

*** Servlet 기본 개념 ***
Servlet : java web programming을 위한 기술(Server + Let)
		  Web Container(or Servlet Container) 위에서 개발, 실행됨
		  MVC의 Controller 역할을 담당
		  (참고 - MVC는 Design Pattern(설계 패턴), SpringMVC는 기술 명칭)
		  Model : 비즈니스 로직과 데이터 액세스 로직을 담당(java(java beans : Dao, Service..))
		  View : 클라이언트 응답을 전담 (jsp or thymeleaf or json)
		  Controller : 제어자 역할, 요청을 분석하여 Model과 연동, 연동 결과를 View에 공유해 응답하게 함(java 기반 Servlet, ex : Spring or SpringBoot의 DispatcherServlet)

Http Request Method
	get 방식 : 정보 조회용, url에 정보가 노출, 전송 용량에 제한 -> 서블릿의 doGet 메서드가 실행
	post 방식 : 정보 전송용, url에 정보가 노출되지 않음, 전송 용량 제한 X (편지를 담는 편지 봉투 역할)
			   http request message body 부분에 저장되어 전송 -> 서블릿의 doPost 메서드가 실행
			   
웹 어플리케이션 설정 정보(메타 데이터)
	1) web module version 3이상, 현재는 5이상(가장 높은 버전은 6)에서 지원하는 Annotation 기반 웹 설정
	   @WebServlet(url-pattern) : 클라이언트에서 해당 서블릿을 실행하기 위한 url 정보
	   							  웹 컨테이너(or WAS)는 서버 시작 시점에 해당 웹 어플리케이션 설정 정보를 로드하여 서비스 함.
	   							  
*** webstudy02 ***
xml 기반 메타 데이터(설정 정보)를 통한 웹어플리케이션을 확인
@WebServlet(url-parttern)애너테이션 역할을 web module 2.5버전에서는 WEB-INF/web.xml에서 한다.

웹 어플리케이션 설정 정보(메타 데이터)
	2) web.xml : 아래의 설정에 의거해 클라이언트는 xmlConfigTest url로 요청한다.
		  <servlet>
		    <servlet-name>XmlConfigTestServlet</servlet-name>
		    <servlet-class>test.XmlConfigTestServlet</servlet-class>
		  </servlet>
		  <servlet-mapping>
		    <servlet-name>XmlConfigTestServlet</servlet-name>
		    <url-pattern>/XmlConfigTest</url-pattern>
		  </servlet-mapping>

**** 서블릿 공부시 재사용할 코드 ****
	/**
	 * doGet() : 클라이언트(브라우저) get 요청을 처리하는 메서드
	 * 클라이언트(브라우저)에서 직접 url을 명시하거나 링크, 폼 등을 이용해 호출될 때 실행
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
//		response.getWriter().append("Served at: ").append(request.getContextPath());
		
//		응답시 컨텐트 타입을 설정, 브라우저에서 지금 응답은 HTML 문서야 라고 메세지를 보내기 위함
		response.setContentType("text/html;charset=UTF-8");
//		HTML을 브라우저로 전송하기 위한 출력 스트림
		PrintWriter out =  response.getWriter();
		out.print("<html>");
		out.print("<head>");
		out.print("<title>Servlet Study</title>");
		out.print("</head>");
		out.print("<body>");
		out.print("<h3>Hello Servlet</h3>");
		out.print("</body>");
		out.print("</html>");
		
		out.close();
	}
	
서블릿 계층 구조 Servlet Hierarchy
최상위 인터페이스
<<interface>>
Servlet : init(), service(), destroy()와 같은 abstract method가 선언되어 있음
설명 : 모든 자바 웹 프로그램은 Servlet interface의 하위 클래스임

위의 Servlet interface를 implements하는 하위 Abstract class 
<<abstract class>>
GenericServlet : 프로토콜에 독립적인 서버 프로그램을 위한 클래스
				 일반적인 서버 차원에서 가져야하는 기능을 자식에게 물려주고, 프로토콜에 특화된 자식 차원에서 구현해야 하는 service(request, response) 메서드는
				 abstract method 선언해 구현을 강제한다 (ex 피자 서비스의 abstract topping 메서드)
				 
위의 abstract class인 GenericServlet을 상속받는(extends) 하위 Abstract class
<<abstract class>>
HttpServlet : Web Program을 위한 HTTP 프로토콜에 특화된 클래스
			  웹 서비스에 필요한 기능을 자식에게 물려준다.
			  자바 웹 프로그램은 이 HttpServlet을 상속받아야 한다.(모든 Servlet과 JSP, ex> Spring의 DispatcherServlet 또한 HttpServlet의 자식임)
			  동작 원리 -> 부모 GenericServlet의 abstract method인 service(request, response)를 implements 구현하여 Web Container가 service 메서드를 호출하면
			  			 구현한 service 메서드가 Http Request Method에 따라 개발자가 구현한 doGet or doPost 등의 dispatch(위임) 하여 실행되고 응답된다.

Form과 Servlet(or JSP) 연동
client
<form action="처리할 서버 프로그램 url" method="get or post">	---- request ----> Web Server -- Web Container -- MyServlet
	<input type="text" name="userId">														  service 호출 --> service() -- dispatch --> doGet() or doPost()
	<button type="submit">검색</button>													<-- response --					

- Http Status Code (상태 코드) : 클라이언트(브라우저)와 서버(WAS)가 서로의 상태를 이해하는 약속, HTTP 상태 코드는 세자리 숫자로 구성
							   대표적인 Status Code 상태 코드 
							   -> 200 OK : 요청이 성공적으로 처리됨. 가장 일반적인 성공 코드
							   	  404 NOT FOUND : 요청한 리소드를 서버에서 찾을 수 없을 때
							   	  405 METHOD NOT ALLOWED : 요청에 사용된 HTTP 메서드(get, pos 등)가 해당 리소스(서버 프로그램)에 대해 허용되지 않음을 의미,
							   	  						-> 만약 post 방식으로 클라이언트가 요청했는데 doGet()을 구현한 경우 
	   	  						  500 Internal Server Error : 서버에 예상하지 못한 오류가 발생하여 요청을 처리할 수 없음을 나타냄. 가장 일반적인 오류
	
*** 서블릿 아키텍처의 핵심 특징 ***
자바 웹 응용 프로그램 개발자 - 표준 서블릿 API 제정 - WAS Vendor
	인터페이스 기반 개발							인터페이스를 구현
1. 표준화된 서블릿 API (인터페이스 기반 개발)
   자바 웹 응용프로그램 개발자는 Servlet API(Servlet, ServletRequest, ServletResponse interface 등)
   Jakarta EE (Java EE) 표준으로 정의된 인터페이스 기반으로 일관되게 웹 어플리케이션을 개발함
   이 표준화된 서블릿 API 덕분에 특정 WAS 제품에 종속되지 않고 일관된 방식으로 웹 어플리케이션을 구현할 수 있음
2. WAS(Web Application Server)의 구현 및 추상화
   Apache Tomcat, JBoss, WebLogic, Jetty 등과 같은 WAS 제품들은 표준화된 Servlet API 인터페이스들을 각자의 방식으로 최적화 되게 구현
   자신의 구현체를 업그레이드를 하여도 서블릿 표준 인터페이스(API)로 응용프로그램 개발자들은 개발하므로 업그레이드가 용이
3. 벤더 독립성 및 이식성
   이러한 서블릿 웹 아키텍쳐 구조 덕분에 특정 WAS에서 개발된 웹 어플리케이션은 다른 WAS에서도 큰 수정없이 동작할 수 있는 높은 이식성(PSA : Portability)을 갖음
   기업은 특정 벤더에 종속되지 않고, 필요에 따라 다양한 WAS 제품을 선택하거나 변경할 수 있는 유연성을 확보할 수 있음
4. 웹 응용 프로그램 개발 생산성 향상
   다양한 WAS 제품군들과 관계없이 표준화된 방법으로 웹 개발이 가능
   
*** 서블릿 라이프 사이클 Servlet LifeCycle ***
IOC 디자인 패턴 : Spring에서 자세히 다룰 예정
				Inversion Of Control (제어의 역전) -> 객체가 필요로 하는 다른 객체(의존성)을 생성해서 사용하는 것이 아니라 
													외부(컨테이너, 프레임워크)등에서 객체를 대신 생성하여 필요할 때 주입해주는 방식을 말함

웹 컨테이너가 서블릿 객체의 클래스 로딩, 객체 생성, 초기화(init()), 서비스 실행(service()), 소멸(destroy())를 담당함
ex - 우리가 장을 볼 때 직접 마트에 가지 않고 앱으로 주문해 내 집 앞으로 아침마다 배달 받는 것! (나는 안가도 어플 사용만으로도 주문하면 물건을 고르고 포장하고 보내는 것 까지 쿠팡에서 다 해줌)

서블릿(자바 웹 프로그램 객체)은 개발자가 직접 객체를 생성하거나 소멸시키지 않고 웹 컨테이너에 의해 그 생명 주기가 전적으로 관리됨 (IOC)

서블릿 생명주기 Servlet LifeCycle
init() : 스타벅스 매장 개업 준비 (인테리어, 직원 교육, 메뉴 준비) 어디서나 스벅은 표준화 되어있음
service() : 손님에게 커피 서비스 (주문 받고 요리하고 손님 부르고..)
destroy() : 매장 폐업(정리, 직원 정산, 임대 반납)
- 참고 : Spring의 Bean LifeCycle에 동일한 개념이 적용 / @PostConstruct, @PreDestroy가 서블릿의 init(), destroy()와 같은 역할을 함


Servlet LifeCycle 상세 분석
1단계 : 서블릿 클래스 로딩 및 객체생성 (class loading & instantiation(인스턴트화))
	   클라이언트 요청 -> Web Container가 해당 서블릿 클래스를 로딩 -> 인스턴트 생성 (단 한번 생성 -> Singleton Pattern)
2단계 : 초기화 단계 (initialization)
	   public void init() or public void init(ServletConfig config)
	   인스턴스 생성 직후 - 단 한번 실행, 서블릿 서비스 전 필요한 초기 작업 수행(설정 정보, 파일, DB 로딩 등..)
3단계 : 서비스 (Service)
	   protected void service(HttpServletRequest request, HttpServletResponse response){
	   }
	   .... dispatch(위임) -> Http Request Method에 따라 -> doGet(request, response) or doPost(resquest, response) 등 매 요청시 실행
	   						 멀티 스레드 환경에서 동시 실행 가능, 실제 웹 서비스를 하는 메서드 (고르인, 구매, 검색 등)
4단계 : 소멸(Destruction)
	   public void destroy(){}
	   서블릿 언로드 또는 WAS(Web Container) 종료 직전 단 한번 실행(캐시 정리, 파일 닫기, DB 연결 해제)

loadOnStartup = 1
 : 웹 어플리케이션이 실행이 시작되는 시점에 가장 우선적으로 이 옵션이 명시된 서블릿을 초기화함.
서블릿 라이프 사이클 구조상 클라이언트의 첫 요청 시점에서블릿이 초기화 작업을 하므로 웹 어필리케이션에서 중요한 역할을 하는 서블릿(초기화 작업이 많은 서블릿 포함)은
이 옵션이 유용함.

*** webstudy04 ***

*** ServletConfig & ServletContext ***
1. ServletConfig
	: 서블릿 설정 정보 객체
	  서블릿 객체 당 하나 생성
	  servletContext의 주소값을 저장하고 있음
	  웹 컨테이너에 의해 서블릿 초기화. 즉, init(ServletConfig config) 시점에 호출되어 ServletConfig 객체가 전달
	  사원이 servlet, 사원증은 servletConfig ⇒ 사원이면 사원증이 무조건 있다 (init()이 무조건 실행되기 때문에 → config를 무조건 부른다)
	구체적으로 어떤 설정 정보인가? 
	  예) Spring MVC에서 DispatcherServlet이 초기화되는 시점에 init 메서드를 웹 컨테이너가 호출하여 Spring 설정 정보가 저장된 ServletConfig 객체를 전달됨
	  

2. ServletContext
	: 웹 어플리케이션 당 하나 생성
	  웹 어플리케이션 내 모든 서블릿과 jsp들이 공유하여 사용할 수 있는 객체.
	  Web Application이 시작 시점에 ServletContext 객체가 생성되고 Web Application 소멸 직전에 ServletContext 객체는 소멸됨.
	  사원 - 사원증, 사원 - 사원증, 사원 - 사원증 ⇒ 사원이 없으면 사원증도 없음  
	  ⇒ 사내 인트라넷 (사원증이 있는 사원만 사용 가능)
    구체적으로 어떤 곳에 사용되는가?
      웹 어플리케이션 전체 설정관리, 각각의 서블릿(jsp 포함)간 데이터 공유 지원
	  
					ServletConfig와 ServletContext	  
구분			ServletConfig				ServletContext
			개별 서블릿 당 하나				웹 어플리케이션 당 하나
			개별 서블릿 전용				웹 어플리케이션 내의 웹 프로그램(Servlet or JSP...)
		@ 애너테이션 또는 web.xml				web.xml
  	Spring과 연관성, 개별 Bean 설정			ApplicationContext
  	
*** ServletContextListener ***
 : Application LifeCycle Listener
 웹 어플리케이션 시작 시점과 종료 시점의 이벤트를 감지하여 시작 시점에 필요한 초기화 작업 (예. 보안)과 contextInitialized()
 종료 시점에 필요한 작업 (예. 백업, 로깅)을 정의해 실행시킬 수 있다. contextDestroyed()
 
	  
	  